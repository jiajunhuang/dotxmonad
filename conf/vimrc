let VIM_PLUG_HOME = '~/.config/nvim/plugged'

call plug#begin(VIM_PLUG_HOME)

" plugins
" language specific: syntax, or indent or something else
Plug 'Shougo/neco-syntax'
" code fmt
Plug 'google/vim-maktaba'
Plug 'google/vim-codefmt'
" LSP
" install coc-json coc-clangd coc-go coc-rust-analyzer coc-pyright coc-tsserver coc-markdownlint
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Synctax highlight
Plug 'sheerun/vim-polyglot'
" auto close tag
Plug 'alvan/vim-closetag'
" ALE
" Go: golangci-lint
" Python: flake8
Plug 'w0rp/ale'
Plug 'craigemery/vim-autotag'
"Plug 'leafOfTree/vim-vue-plugin'
Plug 'posva/vim-vue'
" Plug 'github/copilot.vim'

" utils
" auto complete brackets
Plug 'jiangmiao/auto-pairs'
" FZF
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  } | Plug 'junegunn/fzf.vim'
" ACK
Plug 'mileszs/ack.vim'
" NERDTree
Plug 'preservim/nerdtree'
" REGEX in search
Plug 'othree/eregex.vim'
" Comment/uncomment
Plug 'scrooloose/nerdcommenter'
" Rename/Delete files...
Plug 'tpope/vim-eunuch'
" Git operations
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
" Readline shortcuts in command mode
Plug 'tpope/vim-rsi'
" Change pairs(parentheses, brackets, quotes, XML tags, and more)
Plug 'tpope/vim-surround'
" Supertab
Plug 'ervandew/supertab'
" leap
Plug 'ggandor/leap.nvim'

" look and feel
" Status line
"Plug 'itchyny/lightline.vim'
Plug 'vim-airline/vim-airline'
" Display marks
Plug 'kshenoy/vim-signature'
" Colorful brackets
Plug 'luochen1990/rainbow'
" Remove white space
Plug 'ntpeters/vim-better-whitespace'
" theme
Plug 'sickill/vim-monokai'

call plug#end()

" settings
"syntax
syntax on
syntax enable
set encoding=utf-8
set updatetime=300
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" display
set ignorecase
set ruler
set number
set showcmd
set showmode
set cursorline cursorcolumn
set colorcolumn=120
set wrap
set textwidth=0

"display pairs
set showmatch

" clipboard, remember to install xclip first
set clipboard=unnamedplus

"indent
set expandtab
set shiftwidth=4
set tabstop=4
set softtabstop=4
set cindent
set shiftround

"Tab
set smarttab

" colorscheme, default to monokai, fallback to desert
try
    colorscheme monokai
catch /^Vim\%((\a\+)\)\=:E185/
    colorscheme desert
endtry

" shortcuts
" paste mode
set pastetoggle=<F2>

" toggle number
noremap <F4> :set invnumber<CR>
inoremap <F4> <C-O>:set invnumber<CR>

" vim file explore
nmap <F3> :Explore<CR>

" make mouse only works on command line mode
set mouse=c

" use Ctrl + hjkl to move left, down, up, right
nnoremap <C-H> <C-W>h
nnoremap <C-L> <C-W>l
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k

" resize
nnoremap <Up> <C-W>-2
nnoremap <Down> <C-W>+2
nnoremap <Left> <C-W><2
nnoremap <Right> <C-W>>2

" preview substitute
set inccommand=nosplit
tnoremap <Esc> <C-\><C-n>
nnoremap <C-s> <Esc>:vsplit term://bash<CR>A
nnoremap <C-x> <Esc>:split term://bash<CR>A

" persistent
set undodir=~/.cache/vimundo/
set undofile

" Plugin Settings

" Rainbow
let g:rainbow_active = 1

" fzf
nnoremap <C-p> :Files<CR>
nnoremap <leader>a :Ag<CR>
nnoremap <leader>c :Commits<CR>
nnoremap ff :BLines<CR>

" terminal
nnoremap <leader>t :vsplit term://bash<CR>
nnoremap <leader>T :split term://bash<CR>

" vim markdown
let g:vim_markdown_folding_disabled = 1

" code format
augroup autoformat_settings
  "autocmd FileType bzl AutoFormatBuffer buildifier
  " autocmd FileType c,cpp,proto,javascript,arduino AutoFormatBuffer clang-format
  "autocmd FileType dart AutoFormatBuffer dartfmt
  autocmd FileType go AutoFormatBuffer gofmt
  "autocmd FileType gn AutoFormatBuffer gn
  autocmd FileType javascript,html,css,sass,scss,less,json AutoFormatBuffer js-beautify
  "autocmd FileType java AutoFormatBuffer google-java-format
  "autocmd FileType python AutoFormatBuffer yapf
  autocmd FileType rust AutoFormatBuffer rustfmt
  autocmd FileType vue AutoFormatBuffer prettier
augroup END


" vim-closetag
" filenames like *.xml, *.html, *.xhtml, ...
" These are the file extensions where this plugin is enabled.
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.jsx'
" Shortcut for closing tags, default is '>'
let g:closetag_shortcut = '>'

" ALE
nmap <leader>p <Plug>(ale_previous_wrap)
nmap <leader>n <Plug>(ale_next_wrap)

" CoC
" GoTo code navigation.
nmap <silent> <leader>\ <Plug>(coc-definition)
nmap <silent> <leader>y <Plug>(coc-type-definition)
nmap <silent> <leader>i <Plug>(coc-implementation)
nmap <silent> <leader>r <Plug>(coc-references)
nmap <silent> <leader>rf <Plug>(coc-refactor)
nmap <silent> <leader>rn <Plug>(coc-rename)

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

augroup auto_coc_settings
    " https://github.com/neoclide/coc.nvim/wiki/Using-workspaceFolders
    autocmd FileType python let b:coc_root_patterns = ['.git', '.env']
augroup END

" ACK
let g:ackprg = 'ag --vimgrep'

" NERDTree
nnoremap <C-t> :NERDTreeToggle<CR>

" fold
set foldmethod=syntax
set nofoldenable
nmap fd zA

" completion
let g:SuperTabDefaultCompletionType = "<c-n>"
inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>"

" leap
lua require('leap').add_default_mappings()
